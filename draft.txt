logistic-cost-estimation Application:
--------------------------------------
FIRST STEP
Pages:

1- Material Information

2- Supplier Information

3- KB/Bendix location info

4- Operations information

5- Pcs Price -- *****not sure wheather it is needed or not*****

6- Packaging cost
6.1- Standard Packaging
6.2- Special Packaging
6.3- Total Packaging loop

7- Repacking cost

8- Customs cost

9- Transport cost

10- Annual CO2 cost

11- Warehouse cost

12- Inventory cost

13- Inventory Interest

14- Additional cost

15 -- Cost Calculation (Logistics cost supplier) 
-----------------------------------------------------------------------------------------------------------------------------------------------------------
SECOND STEP
User Entry parameters
------------------------------------
(1) Material Information

1.1 Project Name
1.2 Material Number
1.3 Material Description
1.4 Weight per pcs (kg) 
1.5 Usage
1.6 Daily demand (average)
1.7 Annual volume (average)
1.9 Lifetime (years)
1.10 Peak year
1.11 Peak year volume
1.12 Working Days per year
1.13 SOP


(2) Supplier Information

2.1 Vendor ID
2.2 Vendor Name
2.3 Vendor Country
2.4 City of manufacture
2.5 Vendor ZIP
2.6 Delivery Performance 
2.7 Deliveries per month


(3) KB/Bendix location info

3.1 KB/Bendix Plant
3.2 KB/Bendix - Country
3.3 Distance


(4) Operations Information
ncoterm Code - (Selection formncoterm Named Place                      
4.3 Part Classification - (Selection form)
4.4 Call-off transfer type - (Selection form)
4.5 Latest version (Y031010) of Logistics Directive - (Selection form)
4.6 Lead time (d)
4.7 Sub-supplier used - (Selection form)
4.8 Sub supplier need for boxes (d)
4.9 Packaging tool ownership - (selection form)
4.10 Responsible - (selection form)
4.11 Currency - (selection form)


(5) Pcs Price !!!!!!!!!


(6) Packaging cost

6.1-Per Part Pcs:
6.1.1 Packaging maintenance
6.1.2 Empties scrapping (cardboard/paper)

6.2-Standard packaging (Plant):
6.2.1 Packaging Type (box) - (Selection form)
6.2.2 Filling Quantity (pcs/box)
6.2.3 LU type (pallet) - (Selection form)
6.2.4 Filling Qty (pcs/LU) oversea packaging
6.2.5 price additional packaging (inlays,etc‚Ä¶)

6.3-Special Packaging (CoC)
6.3.1 Special packaging needed (Y/N) - (Selection form)
6.3.2 Special packaging type - (Selection form)
6.3.3 Filling Quantity (pcs/tray)
6.3.4 Tooling cost
6.3.5 additional packaging for SP needed (pallet, cover) - (Selection form)
6.3.6 No. of Trays per SP-pallet
6.3.7 No. of SP-pallets per LU

6.4-Total Packaging Loop
6.4.1 goods receipt
6.4.2 stock 
6.4.3 production
6.4.4 empties
6.4.5 cleaning
6.4.6 dispatch
6.4.7 empties transit KB to supplier
6.4.8 empties receipt
6.4.9 empties stock
6.4.10 production
6.4.11 stock finished parts
6.4.12 dispatch
6.4.13 transit supplier to KB


(7) Repacking cost

7.1 Repacking cost / hr
7.2 Type of goods - (selection form)
7.3 Repacking cost per LU


(8) Customs cost 

8.1 Customs Preference Usage (y/n) - (Selection form)
8.2 HS code
8.3 Duty rate (% of pcs price)
8.4 Tariff rate (% of pcs price)


(9) Transport cost 

9.1 Transportation mode I - (Selection form)
9.2 Transportation mode II - (Selection form)
9.3 Transportation cost per LU
9.4 Transportation Cost Bonded Warehouse per LU
9.5 Stackability Factor - (Selection form)


(10) Annual CO2 cost 

10.1 CO2 cost per ton - (Selection form)


(11) Warehouse cost

11.1 Cost per storage location (monthly)


(12) Inventory Interest

12.1 Inventory Interest Rate
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
CALCULATIONS:
---------------
Later after the first 2 steps...

--- The Calculation is configured successfully ----
-------------------------------------------------------------------------------------------------

***********************************************************************************************
-----------------------------------
rerun problem with streamlit:
----------------------------------
# pages/6_Packaging_Cost.py
import streamlit as st
from utils.validators import PackagingValidator
from utils.data_manager import DataManager

st.set_page_config(page_title="Packaging Cost", page_icon="üì¶")
*********************************************************************************************
def safe_rerun():
    """
    Trigger a rerun in Streamlit, compatible across versions.
    """
    try:
        st.experimental_rerun()
    except AttributeError:
        try:
            from streamlit.runtime.scriptrunner import RerunException
        except ImportError:
            from streamlit.runtime.scriptrunner.script_runner import RerunException
        raise RerunException()
******************************************************************************************************
def main():
    st.title("Packaging Cost")
    st.markdown("Configure packaging-related cost parameters")
    st.markdown("---")

    # Initialize DataManager & Validator
    if 'data_manager' not in st.session_state:
        st.session_state.data_manager = DataManager()
    dm = st.session_state.data_manager
    val = PackagingValidator()

    # Pre-define loop_fields for reuse
    loop_fields = [
        "goods receipt", "stock raw materials", "production",
        "empties return", "cleaning", "dispatch",
        "empties transit (KB ‚Üí Supplier)", "empties receipt (at Supplier)",
        "empties in stock (Supplier)", "production (contrary loop)",
        "stock finished parts", "dispatch (finished parts)",
        "transit (Supplier ‚Üí KB)"
    ]

    # ---------------- Add New Packaging Record ----------------
    with st.form("pkg_form"):
        st.subheader("Add New Packaging Record")

        # 6.1 Per‚ÄêPart Costs
        st.markdown("**6.1 ‚Äí Per Part (per piece)**")
        col1, col2 = st.columns(2)
        with col1:
            pack_maint = st.number_input(
                "Packaging maintenance (‚Ç¨ per pcs)",
                min_value=0.0, step=0.001, format="%.3f",
                help="Maintenance cost per piece"
            )
        with col2:
            empties_scrap = st.number_input(
                "Empties scrapping (‚Ç¨ per pcs)",
                min_value=0.0, step=0.001, format="%.3f",
                help="Scrapping cost per piece (cardboard/paper)"
            )

        st.markdown("---")
        # 6.2 Standard Packaging (Plant)
        st.markdown("**6.2 ‚Äí Standard Packaging (Plant)**")
        col1, col2 = st.columns(2)
        with col1:
            box_type = st.selectbox(
                "Packaging Type (box)",
                [
                    "None", "Cardboard S", "Cardboard M", "Cardboard L", "Cardboard XL",
                    "Cardboard LU (ISO)", "KLT3214 / LID", "KLT4314 / LID",
                    "KLT4328 / LID", "KLT6414 / LID", "KLT6417 / LID", "KLT6422 / LID",
                    "KLT6428 / LID", "R-KLT6429 / LID", "ESD KLT3115 / LID",
                    "ESD KLT4115 / LID", "ESD KLT4129 / LID", "ESD KLT 6115 / LID",
                    "ESD KLT 6122 / LID", "ESD KLT 6129 / LID", "Green Basket / LID",
                    "Magnum OPT", "Wooden Box", "Gitterbox (rental)", "Gitterbox", "EURO LU / LID"
                ],
                help="Select the type of box used"
            )
            fill_qty_box = st.number_input(
                "Filling Quantity (pcs/box)",
                min_value=0, step=1,
                help="Number of pieces per box"
            )
        with col2:
            pallet_type = st.selectbox(
                "LU Type (pallet)",
                ["EURO Pallet Price", "ISO Pallet Price"],
                help="Select pallet type"
            )
            fill_qty_lu_oversea = st.number_input(
                "Filling Qty (pcs/LU) overseas",
                min_value=0, step=1,
                help="Number of pieces per load unit for overseas shipping"
            )
        add_pack_price = st.number_input(
            "Price additional packaging (inlays, etc.) ‚Ç¨",
            min_value=0.0, step=0.01, format="%.2f",
            help="Extra packaging costs (e.g., inlays)"
        )

        st.markdown("---")
        # 6.3 Special Packaging (CoC)
        st.markdown("**6.3 ‚Äí Special Packaging (CoC)**")
        col1, col2 = st.columns(2)
        with col1:
            sp_needed = st.selectbox(
                "Special packaging needed?",
                ["Yes", "No"],
                help="Does this material require special packaging?"
            )
            sp_type = st.selectbox(
                "Special packaging type",
                ["Inlay Tray", "Inlay tray pallet size", "Standalone tray"],
                help="Select the special packaging type"
            )
            fill_qty_tray = st.number_input(
                "Filling Qty (pcs/tray)",
                min_value=0, step=1,
                help="Number of pieces per tray"
            )
            tooling_cost = st.number_input(
                "Tooling cost (‚Ç¨)",
                min_value=0.0, step=0.01, format="%.2f",
                help="One‚Äêtime tooling cost for special packaging"
            )
        with col2:
            add_sp_pack = st.selectbox(
                "Additional packaging needed (pallet, cover)?",
                ["Yes", "No"],
                help="Does special packaging require extra pallet or cover?"
            )
            trays_per_sp_pal = st.number_input(
                "No. of Trays per SP‚Äêpallet",
                min_value=0, step=1,
                help="Trays per special‚Äêpackaging pallet"
            )
            sp_pallets_per_lu = st.number_input(
                "No. of SP‚Äêpallets per LU",
                min_value=0, step=1,
                help="Special packaging pallets per load unit"
            )

        st.markdown("---")
        # 6.4 Total Packaging Loop (Qty of LUs at Each Stage)
        st.markdown("**6.4 ‚Äí Total Packaging Loop (Quantity of LUs)**")
        loop_data = {}
        cols = st.columns(4)
        for idx, field in enumerate(loop_fields):
            loop_data[field] = cols[idx % 4].number_input(
                field.title(),
                min_value=0, step=1,
                help=f"Number of LUs for {field}"
            )

        submitted = st.form_submit_button("Add Packaging Cost", type="primary")
        if submitted:
            pkg = {
                "pack_maint": pack_maint,
                "empties_scrap": empties_scrap,
                "box_type": box_type,
                "fill_qty_box": fill_qty_box,
                "pallet_type": pallet_type,
                "fill_qty_lu_oversea": fill_qty_lu_oversea,
                "add_pack_price": add_pack_price,
                "sp_needed": sp_needed,
                "sp_type": sp_type,
                "fill_qty_tray": fill_qty_tray,
                "tooling_cost": tooling_cost,
                "add_sp_pack": add_sp_pack,
                "trays_per_sp_pal": trays_per_sp_pal,
                "sp_pallets_per_lu": sp_pallets_per_lu,
                "loop_data": loop_data
            }
            res = val.validate_packaging(pkg)
            if res["is_valid"]:
                dm.add_packaging(pkg)
                st.success("Packaging record added successfully!")
             **********************************************************************************
                safe_rerun()
            ****************************************************************************************
            else:
                for e in res["errors"]:
                    st.error(e)

    st.markdown("---")

    # ---------------- Display Existing Packaging Records ----------------
    st.subheader("Existing Packaging Records")
    packaging_list = dm.get_packaging()
    if not packaging_list:
        st.info("No packaging records configured yet.")

    # Callbacks to manage edit flags
    def enter_edit_pkg(idx):
        st.session_state[f"edit_pkg_flag_{idx}"] = True

    def exit_edit_pkg(idx):
        st.session_state[f"edit_pkg_flag_{idx}"] = False

    for i, pkg in enumerate(packaging_list):
        # Initialize flag if missing
        flag_key = f"edit_pkg_flag_{i}"
        if flag_key not in st.session_state:
            st.session_state[flag_key] = False

        header = f"{pkg['box_type']} | {pkg['pallet_type']} | Special: {pkg['sp_needed']}"
        with st.expander(header):
            col1, col2, col3 = st.columns([3, 1, 1])
            with col1:
                st.write(f"**Packaging maintenance:** ‚Ç¨{pkg['pack_maint']:.3f} per pcs")
                st.write(f"**Empties scrapping:** ‚Ç¨{pkg['empties_scrap']:.3f} per pcs")
                st.write(f"**Add. packaging price:** ‚Ç¨{pkg['add_pack_price']:.2f}")
                st.write(f"**Special needed:** {pkg['sp_needed']}")
                st.write(f"**SP Type:** {pkg['sp_type']}")
                st.write(f"**Tooling cost:** ‚Ç¨{pkg['tooling_cost']:.2f}")
                st.write(f"**Additional SP needed:** {pkg['add_sp_pack']}")
                st.write(f"**Trays/SP‚Äêpallet:** {pkg['trays_per_sp_pal']}")
                st.write(f"**SP‚Äêpallets/LU:** {pkg['sp_pallets_per_lu']}")
                st.write("**Loop Data (LUs):**")
                for stage, qty in pkg["loop_data"].items():
                    st.write(f"  ‚Ä¢ {stage.title()}: {qty}")
            with col2:
                st.button(
                    "Edit",
                    key=f"edit_pkg_btn_{i}",
                    on_click=enter_edit_pkg,
                    args=(i,)
                )
            with col3:
                if st.button("Delete", key=f"del_pkg_{i}", type="secondary"):
                    dm.remove_packaging(i)
                    st.success("Packaging record deleted")
                    safe_rerun()

    # ---------------- Edit Packaging Record ----------------
    for i, pkg in enumerate(packaging_list):
        if st.session_state.get(f"edit_pkg_flag_{i}", False):
            with st.form(f"edit_pkg_form_{i}"):
                st.subheader(f"Edit Packaging Record ({pkg['box_type']})")

                # 6.1 Per‚ÄêPart
                st.markdown("**6.1 ‚Äí Per Part (per piece)**")
                col1, col2 = st.columns(2)
                with col1:
                    new_pack_maint = st.number_input(
                        "Packaging maintenance (‚Ç¨ per pcs)",
                        value=pkg["pack_maint"], min_value=0.0, step=0.001, format="%.3f",
                        key=f"new_pack_maint_{i}"
                    )
                with col2:
                    new_empties_scrap = st.number_input(
                        "Empties scrapping (‚Ç¨ per pcs)",
                        value=pkg["empties_scrap"], min_value=0.0, step=0.001, format="%.3f",
                        key=f"new_empties_scrap_{i}"
                    )

                st.markdown("---")
                # 6.2 Standard Packaging
                st.markdown("**6.2 ‚Äí Standard Packaging (Plant)**")
                col1, col2 = st.columns(2)
                with col1:
                    box_options = [
                        "None", "Cardboard S", "Cardboard M", "Cardboard L", "Cardboard XL",
                        "Cardboard LU (ISO)", "KLT3214 / LID", "KLT4314 / LID",
                        "KLT4328 / LID", "KLT6414 / LID", "KLT6417 / LID", "KLT6422 / LID",
                        "KLT6428 / LID", "R-KLT6429 / LID", "ESD KLT3115 / LID",
                        "ESD KLT4115 / LID", "ESD KLT4129 / LID", "ESD KLT 6115 / LID",
                        "ESD KLT 6122 / LID", "ESD KLT 6129 / LID", "Green Basket / LID",
                        "Magnum OPT", "Wooden Box", "Gitterbox (rental)", "Gitterbox", "EURO LU / LID"
                    ]
                    try:
                        default_idx = box_options.index(pkg["box_type"])
                    except ValueError:
                        default_idx = 0
                    new_box_type = st.selectbox(
                        "Packaging Type (box)",
                        box_options,
                        index=default_idx,
                        key=f"new_box_type_{i}"
                    )
                    new_fill_qty_box = st.number_input(
                        "Filling Quantity (pcs/box)",
                        value=pkg["fill_qty_box"], min_value=0, step=1,
                        key=f"new_fill_qty_box_{i}"
                    )
                with col2:
                    pallet_options = ["EURO Pallet Price", "ISO Pallet Price"]
                    try:
                        pal_idx = pallet_options.index(pkg["pallet_type"])
                    except ValueError:
                        pal_idx = 0
                    new_pallet_type = st.selectbox(
                        "LU Type (pallet)",
                        pallet_options,
                        index=pal_idx,
                        key=f"new_pallet_type_{i}"
                    )
                    new_fill_qty_lu_oversea = st.number_input(
                        "Filling Qty (pcs/LU) overseas",
                        value=pkg["fill_qty_lu_oversea"], min_value=0, step=1,
                        key=f"new_fill_qty_lu_oversea_{i}"
                    )
                new_add_pack_price = st.number_input(
                    "Price additional packaging (inlays, etc.) ‚Ç¨",
                    value=pkg["add_pack_price"], min_value=0.0, step=0.01, format="%.2f",
                    key=f"new_add_pack_price_{i}"
                )

                st.markdown("---")
                # 6.3 Special Packaging
                st.markdown("**6.3 ‚Äí Special Packaging (CoC)**")
                col1, col2 = st.columns(2)
                with col1:
                    sp_needed_options = ["Yes", "No"]
                    try:
                        spn_idx = sp_needed_options.index(pkg["sp_needed"])
                    except ValueError:
                        spn_idx = 0
                    new_sp_needed = st.selectbox(
                        "Special packaging needed?",
                        sp_needed_options,
                        index=spn_idx,
                        key=f"new_sp_needed_{i}"
                    )
                    sp_type_options = ["Inlay Tray", "Inlay tray pallet size", "Standalone tray"]
                    try:
                        spt_idx = sp_type_options.index(pkg["sp_type"])
                    except ValueError:
                        spt_idx = 0
                    new_sp_type = st.selectbox(
                        "Special packaging type",
                        sp_type_options,
                        index=spt_idx,
                        key=f"new_sp_type_{i}"
                    )
                    new_fill_qty_tray = st.number_input(
                        "Filling Qty (pcs/tray)",
                        value=pkg["fill_qty_tray"], min_value=0, step=1,
                        key=f"new_fill_qty_tray_{i}"
                    )
                    new_tooling_cost = st.number_input(
                        "Tooling cost (‚Ç¨)",
                        value=pkg["tooling_cost"], min_value=0.0, step=0.01, format="%.2f",
                        key=f"new_tooling_cost_{i}"
                    )
                with col2:
                    add_sp_pack_options = ["Yes", "No"]
                    try:
                        asp_idx = add_sp_pack_options.index(pkg["add_sp_pack"])
                    except ValueError:
                        asp_idx = 0
                    new_add_sp_pack = st.selectbox(
                        "Additional packaging needed (pallet, cover)?",
                        add_sp_pack_options,
                        index=asp_idx,
                        key=f"new_add_sp_pack_{i}"
                    )
                    new_trays_per_sp_pal = st.number_input(
                        "No. of Trays per SP‚Äêpallet",
                        value=pkg["trays_per_sp_pal"], min_value=0, step=1,
                        key=f"new_trays_per_sp_pal_{i}"
                    )
                    new_sp_pallets_per_lu = st.number_input(
                        "No. of SP‚Äêpallets per LU",
                        value=pkg["sp_pallets_per_lu"], min_value=0, step=1,
                        key=f"new_sp_pallets_per_lu_{i}"
                    )

                st.markdown("---")
                # 6.4 Total Packaging Loop
                st.markdown("**6.4 ‚Äí Total Packaging Loop (Quantity of LUs)**")
                cols = st.columns(4)
                new_loop_data = {}
                for idx_field, field in enumerate(loop_fields):
                    new_loop_data[field] = cols[idx_field % 4].number_input(
                        field.title(),
                        value=pkg["loop_data"].get(field, 0),
                        min_value=0, step=1,
                        key=f"new_loop_{i}_{idx_field}"
                    )

                # Action buttons
                col_upd, col_cancel = st.columns(2)
                with col_upd:
                    if st.form_submit_button("Update Packaging", type="primary"):
                        updated_pkg = {
                            "pack_maint": new_pack_maint,
                            "empties_scrap": new_empties_scrap,
                            "box_type": new_box_type,
                            "fill_qty_box": new_fill_qty_box,
                            "pallet_type": new_pallet_type,
                            "fill_qty_lu_oversea": new_fill_qty_lu_oversea,
                            "add_pack_price": new_add_pack_price,
                            "sp_needed": new_sp_needed,
                            "sp_type": new_sp_type,
                            "fill_qty_tray": new_fill_qty_tray,
                            "tooling_cost": new_tooling_cost,
                            "add_sp_pack": new_add_sp_pack,
                            "trays_per_sp_pal": new_trays_per_sp_pal,
                            "sp_pallets_per_lu": new_sp_pallets_per_lu,
                            "loop_data": new_loop_data
                        }
                        res = val.validate_packaging(updated_pkg)
                        if res["is_valid"]:
                            dm.update_packaging(i, updated_pkg)
                            st.success("Packaging record updated")
                            exit_edit_pkg(i)
                            safe_rerun()
                        else:
                            for e in res["errors"]:
                                st.error(e)
                with col_cancel:
                    if st.form_submit_button("Cancel"):
                        exit_edit_pkg(i)
                        safe_rerun()

if __name__ == "__main__":
    main()

-------------------------------------------------------------------------------------------------

15_Cost_Calculation.py -- Original Code:

# ---- Cost Calculation Page ----
import streamlit as st
import pandas as pd
from utils.calculations import LogisticsCostCalculator
from utils.data_manager import DataManager
import json

st.set_page_config(page_title="Cost Calculation", page_icon="üí∞", layout="wide")

def main():
    st.title("Cost Calculation & Results")
    st.markdown("Calculate total logistics costs and export results")
    st.markdown("---")

    # --- Data Initialization ---
    if 'data_manager' not in st.session_state:
        st.session_state.data_manager = DataManager()

    data_manager = st.session_state.data_manager
    calculator = LogisticsCostCalculator()

    # --- Load All Configurations ---
    materials = data_manager.get_materials()
    suppliers = data_manager.get_suppliers()
    locations = data_manager.get_locations()
    operations = data_manager.get_operations()
    packaging_configs = data_manager.get_packaging()
    repacking_configs = data_manager.get_repacking()
    customs_configs = data_manager.get_customs()
    transport_configs = data_manager.get_transport()
    co2_configs = data_manager.get_co2()
    warehouse_configs = data_manager.get_warehouse()
    interest_configs = data_manager.get_interest()
    additional_costs = data_manager.get_additional_costs()

    # --- Check Required Data ---
    missing_configs = []
    if not materials:          missing_configs.append("Materials")
    if not suppliers:          missing_configs.append("Suppliers")
    if not packaging_configs:  missing_configs.append("Packaging")
    if not transport_configs:  missing_configs.append("Transport")
    if not warehouse_configs:  missing_configs.append("Warehouse")
    if not co2_configs:        missing_configs.append("CO‚ÇÇ")

    if missing_configs:
        st.error(f"‚ö†Ô∏è Missing configurations: {', '.join(missing_configs)}")
        st.info("Please configure all required data before performing calculations.")
        return

    # --- Metrics Overview ---
    st.subheader("üìä Configuration Overview")
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("Materials", len(materials))
        st.metric("Suppliers", len(suppliers))
        st.metric("Locations", len(locations))
    with col2:
        st.metric("Operations", len(operations))
        st.metric("Packaging", len(packaging_configs))
        st.metric("Repacking", len(repacking_configs))
    with col3:
        st.metric("Customs", len(customs_configs))
        st.metric("Transport", len(transport_configs))
        st.metric("CO‚ÇÇ", len(co2_configs))
    with col4:
        st.metric("Warehouse", len(warehouse_configs))
        st.metric("Interest", len(interest_configs))
        st.metric("Additional", len(additional_costs))

    st.markdown("---")

    # --- Calculation Controls ---
    st.subheader("üîß Calculation Settings")
    col1, col2 = st.columns(2)
    with col1:
        calculation_mode = st.selectbox(
            "Calculation Mode",
            options=["All Material-Supplier Pairs", "Selected Material-Supplier Pairs"]
        )
    with col2:
        export_format = st.selectbox(
            "Export Format", options=["CSV", "Excel", "JSON"]
        )
        show_detailed_breakdown = st.checkbox("Show Detailed Breakdown", value=True)

    # --- Select pairs if needed ---
    selected_pairs = []
    if calculation_mode == "Selected Material-Supplier Pairs":
        st.subheader("Select Material-Supplier Pairs")
        available_pairs = data_manager.get_material_supplier_pairs()
        
        if not available_pairs:
            st.warning("No material-supplier pairs found.")
            return
            
        selected_pair_ids = st.multiselect(
            "Select Material-Supplier Pairs for Calculation",
            options=[pair['pair_id'] for pair in available_pairs],
            default=[pair['pair_id'] for pair in available_pairs[:5]],  # Default to first 5
            format_func=lambda x: next(pair['display_name'] for pair in available_pairs if pair['pair_id'] == x)
        )
        
        if not selected_pair_ids:
            st.warning("Please select at least one pair.")
            return
        
        selected_pairs = [pair for pair in available_pairs if pair['pair_id'] in selected_pair_ids]

    # --- Run Calculation ---
    if st.button("üöÄ Calculate Logistics Costs", type="primary"):
        with st.spinner("Calculating logistics costs..."):
            try:
                results = []
                
                # Prepare pairs for calculation
                if calculation_mode == "All Material-Supplier Pairs":
                    pairs_to_calculate = data_manager.get_material_supplier_pairs()
                else:
                    pairs_to_calculate = selected_pairs
                
                # Get singleton configs (first one if exists)
                operations_config = operations[0] if operations else None
                location_config = locations[0] if locations else None
                repacking_config = repacking_configs[0] if repacking_configs else None
                customs_config = customs_configs[0] if customs_configs else None
                co2_config = co2_configs[0] if co2_configs else None
                
                # Calculate for each pair
                for pair in pairs_to_calculate:
                    material = pair['material']
                    supplier = pair['supplier']
                    
                    # Get configs for this pair (using first available for now)
                    packaging_config = packaging_configs[0] if packaging_configs else None
                    transport_config = transport_configs[0] if transport_configs else None
                    warehouse_config = warehouse_configs[0] if warehouse_configs else None
                    
                    if not all([packaging_config, transport_config, warehouse_config]):
                        st.warning(f"Skipping {material['material_no']} - {supplier['vendor_id']}: Missing required configurations")
                        continue
                    
                    # Calculate costs
                    result = calculator.calculate_total_logistics_cost(
                        material=material,
                        supplier=supplier,
                        packaging_config=packaging_config,
                        transport_config=transport_config,
                        warehouse_config=warehouse_config,
                        repacking_config=repacking_config,
                        customs_config=customs_config,
                        co2_config=co2_config,
                        additional_costs=additional_costs,
                        operations_config=operations_config,
                        location_config=location_config,
                        inventory_config=interest_configs[0] if interest_configs else None
                    )
                    
                    if result:
                        results.append(result)
                
                if results:
                    st.session_state.calculation_results = results
                    st.success(f"‚úÖ Calculation completed! {len(results)} configurations processed.")
                    
                    # Show any calculation errors
                    errors = calculator.get_calculation_errors()
                    if errors:
                        with st.expander("‚ö†Ô∏è Calculation Warnings"):
                            for error in errors:
                                st.warning(error)
                else:
                    st.error("‚ùå No valid calculations could be performed. Please check your configurations.")
                    errors = calculator.get_calculation_errors()
                    if errors:
                        st.error("Calculation errors:")
                        for error in errors:
                            st.error(f"‚Ä¢ {error}")
                    
            except Exception as e:
                st.error(f"‚ùå Error during calculation: {str(e)}")
                import traceback
                st.error(traceback.format_exc())
                return

    # --- Display Results ---
    if 'calculation_results' in st.session_state and st.session_state.calculation_results:
        results = st.session_state.calculation_results
        st.markdown("---")
        st.subheader("üìà Calculation Results")

        # Summary metrics
        total_configurations = len(results)
        total_costs = [r['total_cost_per_piece'] for r in results if r.get('total_cost_per_piece') is not None]
        
        if total_costs:
            avg_total_cost = sum(total_costs) / len(total_costs)
            min_cost = min(total_costs)
            max_cost = max(total_costs)
            
            col1, col2, col3, col4 = st.columns(4)
            col1.metric("Configurations", total_configurations)
            col2.metric("Average Cost/Piece", f"‚Ç¨{avg_total_cost:.3f}")
            col3.metric("Min Cost/Piece", f"‚Ç¨{min_cost:.3f}")
            col4.metric("Max Cost/Piece", f"‚Ç¨{max_cost:.3f}")

        # --- Results Table ---
        st.subheader("Summary Results")
        
        # Create summary dataframe
        summary_data = []
        for r in results:
            summary_data.append({
                'Material ID': r.get('material_id', ''),
                'Material Description': r.get('material_desc', ''),
                'Supplier ID': r.get('supplier_id', ''),
                'Supplier Name': r.get('supplier_name', ''),
                'Total Cost/Piece': f"‚Ç¨{r.get('total_cost_per_piece', 0):.3f}",
                'Packaging Cost': f"‚Ç¨{r.get('packaging_cost_per_piece', 0):.3f}",
                'Transport Cost': f"‚Ç¨{r.get('transport_cost_per_piece', 0):.3f}",
                'Warehouse Cost': f"‚Ç¨{r.get('warehouse_cost_per_piece', 0):.3f}",
                'CO‚ÇÇ Cost': f"‚Ç¨{r.get('co2_cost_per_piece', 0):.3f}",
                'Total Annual Cost': f"‚Ç¨{r.get('total_annual_cost', 0):,.0f}"
            })
        
        df_summary = pd.DataFrame(summary_data)
        st.dataframe(df_summary, use_container_width=True)

        # --- Detailed Breakdown ---
        if show_detailed_breakdown:
            st.subheader("Detailed Cost Breakdown")
            
            for i, result in enumerate(results):
                material_desc = f"{result.get('material_id', '')} - {result.get('material_desc', '')}"
                supplier_desc = f"{result.get('supplier_id', '')} - {result.get('supplier_name', '')}"
                
                with st.expander(f"üì¶ {material_desc} | üè≠ {supplier_desc}"):
                    # Create tabs for different sections
                    tab1, tab2, tab3, tab4 = st.tabs(["Cost Components", "Material Details", "Supply Chain", "Packaging Details"])
                    
                    with tab1:
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write("**üí∞ Cost Breakdown per Piece:**")
                            st.write(f"‚Ä¢ Packaging: ‚Ç¨{result.get('packaging_cost_per_piece', 0):.3f}")
                            st.write(f"‚Ä¢ Repacking: ‚Ç¨{result.get('repacking_cost_per_piece', 0):.3f}")
                            st.write(f"‚Ä¢ Transport: ‚Ç¨{result.get('transport_cost_per_piece', 0):.3f}")
                            st.write(f"‚Ä¢ Warehouse: ‚Ç¨{result.get('warehouse_cost_per_piece', 0):.3f}")
                            st.write(f"‚Ä¢ Customs: ‚Ç¨{result.get('customs_cost_per_piece', 0):.3f}")
                            st.write(f"‚Ä¢ CO‚ÇÇ: ‚Ç¨{result.get('co2_cost_per_piece', 0):.3f}")
                            st.write(f"‚Ä¢ Additional: ‚Ç¨{result.get('additional_cost_per_piece', 0):.3f}")
                            st.write(f"**üéØ Total per Piece: ‚Ç¨{result.get('total_cost_per_piece', 0):.3f}**")
                        
                        with col2:
                            st.write("**üìä Annual Calculations:**")
                            st.write(f"‚Ä¢ Annual Volume: {result.get('Annual Volume', 0):,} pieces")
                            st.write(f"‚Ä¢ Total Annual Cost: ‚Ç¨{result.get('total_annual_cost', 0):,.0f}")
                            
                            # Cost distribution pie chart
                            total_cost = result.get('total_cost_per_piece', 0)
                            if total_cost > 0:
                                st.write("**üìà Cost Distribution:**")
                                costs = {
                                    'Packaging': result.get('packaging_cost_per_piece', 0),
                                    'Transport': result.get('transport_cost_per_piece', 0),
                                    'Warehouse': result.get('warehouse_cost_per_piece', 0),
                                    'CO‚ÇÇ': result.get('co2_cost_per_piece', 0),
                                    'Customs': result.get('customs_cost_per_piece', 0),
                                    'Repacking': result.get('repacking_cost_per_piece', 0),
                                    'Additional': result.get('additional_cost_per_piece', 0)
                                }
                                for component, cost in costs.items():
                                    if cost > 0:
                                        percentage = (cost / total_cost) * 100
                                        st.write(f"‚Ä¢ {component}: {percentage:.1f}%")
                    
                    with tab2:
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write("**üì¶ Material Information:**")
                            st.write(f"‚Ä¢ Project: {result.get('Project Name', 'N/A')}")
                            st.write(f"‚Ä¢ Material ID: {result.get('material_id', 'N/A')}")
                            st.write(f"‚Ä¢ Description: {result.get('material_desc', 'N/A')}")
                            st.write(f"‚Ä¢ Annual Volume: {result.get('Annual Volume', 0):,}")
                            st.write(f"‚Ä¢ Price per Piece: ‚Ç¨{result.get('Price (Pcs)', 0):.2f}")
                            st.write(f"‚Ä¢ SOP: {result.get('SOP', 'N/A')}")
                        
                        with col2:
                            st.write("**üè≠ Supplier Information:**")
                            st.write(f"‚Ä¢ Supplier ID: {result.get('supplier_id', 'N/A')}")
                            st.write(f"‚Ä¢ Name: {result.get('supplier_name', 'N/A')}")
                            st.write(f"‚Ä¢ City: {result.get('City of Manufacture', 'N/A')}")
                            st.write(f"‚Ä¢ ZIP: {result.get('Vendor ZIP', 'N/A')}")
                            st.write(f"‚Ä¢ Deliveries/Month: {result.get('Deliveries per Month', 0)}")
                    
                    with tab3:
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write("**üöö Transport & Operations:**")
                            st.write(f"‚Ä¢ Transport Mode: {result.get('Transport type', 'N/A')}")
                            st.write(f"‚Ä¢ Transport Cost/LU: ‚Ç¨{result.get('Transport cost per LU', 0):.2f}")
                            st.write(f"‚Ä¢ Incoterm: {result.get('Incoterm code', 'N/A')}")
                            st.write(f"‚Ä¢ Incoterm Place: {result.get('Incoterm Named Place', 'N/A')}")
                            st.write(f"‚Ä¢ Lead Time: {result.get('Lead time (d)', 0)} days")
                        
                        with col2:
                            st.write("**üè¨ Warehouse & Inventory:**")
                            st.write(f"‚Ä¢ Safety Stock (pallets): {result.get('safety_stock_no_pal', 0):.1f}")
                            st.write(f"‚Ä¢ Call-off Type: {result.get('Call-off transfer type', 'N/A')}")
                            st.write(f"‚Ä¢ Sub-supplier Used: {result.get('Sub-Supplier Used', 'N/A')}")
                            st.write(f"‚Ä¢ Duty Rate: {result.get('Duty Rate (% Of pcs price)', 0):.1f}%")
                    
                    with tab4:
                        st.write("**üì¶ Packaging Configuration:**")
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write(f"‚Ä¢ Packaging Type: {result.get('packaging_type', 'N/A')}")
                            st.write(f"‚Ä¢ Filling/Box: {result.get('Filling degree per box', 0)} pcs")
                            st.write(f"‚Ä¢ Filling/Pallet: {result.get('Filling degree per pallet', 0)} pcs")
                            st.write(f"‚Ä¢ Special Packaging: {result.get('Special packaging required', 'N/A')}")
                            st.write(f"‚Ä¢ Packaging Loop: {result.get('Packaging Loop', 0)} days")
                        
                        with col2:
                            st.write("**üîÑ Packaging Loop Details:**")
                            loop_stages = [
                                ('Goods Receipt', 'goods_receipt'),
                                ('Stock Raw Materials', 'stock_raw_materials'),
                                ('Production', 'production'),
                                ('Empties Return', 'empties_return'),
                                ('Cleaning', 'cleaning'),
                                ('Dispatch', 'dispatch')
                            ]
                            for label, key in loop_stages:
                                value = result.get(key, 0)
                                if value > 0:
                                    st.write(f"‚Ä¢ {label}: {value} days")

        # --- Export Functionality ---
        st.markdown("---")
        st.subheader("üìÅ Export Results")
        
        if export_format == "CSV":
            # Create full results dataframe
            df_export = pd.DataFrame(results)
            csv_data = df_export.to_csv(index=False)
            st.download_button(
                label="üìÑ Download Full Results CSV",
                data=csv_data,
                file_name=f"logistics_costs_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
        
        elif export_format == "Excel":
            # Create Excel file with multiple sheets
            output = pd.ExcelWriter('temp.xlsx', engine='xlsxwriter')
            
            # Summary sheet
            df_summary.to_excel(output, sheet_name='Summary', index=False)
            
            # Detailed results sheet
            df_detailed = pd.DataFrame(results)
            df_detailed.to_excel(output, sheet_name='Detailed Results', index=False)
            
            # Cost breakdown sheet
            cost_breakdown = []
            for r in results:
                cost_breakdown.append({
                    'Material': f"{r.get('material_id')} - {r.get('material_desc')}",
                    'Supplier': f"{r.get('supplier_id')} - {r.get('supplier_name')}",
                    'Packaging Cost': r.get('packaging_cost_per_piece', 0),
                    'Transport Cost': r.get('transport_cost_per_piece', 0),
                    'Warehouse Cost': r.get('warehouse_cost_per_piece', 0),
                    'CO‚ÇÇ Cost': r.get('co2_cost_per_piece', 0),
                    'Customs Cost': r.get('customs_cost_per_piece', 0),
                    'Repacking Cost': r.get('repacking_cost_per_piece', 0),
                    'Additional Cost': r.get('additional_cost_per_piece', 0),
                    'Total Cost': r.get('total_cost_per_piece', 0)
                })
            df_breakdown = pd.DataFrame(cost_breakdown)
            df_breakdown.to_excel(output, sheet_name='Cost Breakdown', index=False)
            
            output.close()
            
            with open('temp.xlsx', 'rb') as f:
                excel_data = f.read()
            
            st.download_button(
                label="üìä Download Excel Report",
                data=excel_data,
                file_name=f"logistics_report_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        
        elif export_format == "JSON":
            json_data = json.dumps(results, indent=2, default=str)
            st.download_button(
                label="üìÑ Download JSON",
                data=json_data,
                file_name=f"logistics_costs_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )

        # --- Comparison Analysis ---
        if len(results) > 1:
            st.markdown("---")
            st.subheader("üìä Comparison Analysis")
            
            # Find best and worst configs
            valid_results = [r for r in results if r.get('total_cost_per_piece') is not None]
            if valid_results:
                best_config = min(valid_results, key=lambda x: x['total_cost_per_piece'])
                worst_config = max(valid_results, key=lambda x: x['total_cost_per_piece'])
                
                col1, col2 = st.columns(2)
                with col1:
                    st.success("**üèÜ Best Configuration (Lowest Cost)**")
                    st.write(f"Material: {best_config['material_id']} - {best_config['material_desc']}")
                    st.write(f"Supplier: {best_config['supplier_id']} - {best_config['supplier_name']}")
                    st.write(f"Total Cost: ‚Ç¨{best_config['total_cost_per_piece']:.3f}/piece")
                    st.write(f"Annual Cost: ‚Ç¨{best_config['total_annual_cost']:,.0f}")
                
                with col2:
                    st.error("**üìà Highest Cost Configuration**")
                    st.write(f"Material: {worst_config['material_id']} - {worst_config['material_desc']}")
                    st.write(f"Supplier: {worst_config['supplier_id']} - {worst_config['supplier_name']}")
                    st.write(f"Total Cost: ‚Ç¨{worst_config['total_cost_per_piece']:.3f}/piece")
                    st.write(f"Annual Cost: ‚Ç¨{worst_config['total_annual_cost']:,.0f}")
                
                # Cost difference analysis
                cost_difference = worst_config['total_cost_per_piece'] - best_config['total_cost_per_piece']
                cost_difference_pct = (cost_difference / best_config['total_cost_per_piece']) * 100 if best_config['total_cost_per_piece'] > 0 else 0
                
                st.info(f"**üí° Cost Difference:** ‚Ç¨{cost_difference:.3f}/piece ({cost_difference_pct:.1f}% higher)")
                
                # Component comparison
                st.subheader("Component Cost Comparison")
                components = ['packaging_cost_per_piece', 'transport_cost_per_piece', 'warehouse_cost_per_piece', 
                             'co2_cost_per_piece', 'customs_cost_per_piece', 'repacking_cost_per_piece']
                
                comparison_data = []
                for comp in components:
                    comp_name = comp.replace('_cost_per_piece', '').replace('_', ' ').title()
                    comparison_data.append({
                        'Component': comp_name,
                        'Best Config': f"‚Ç¨{best_config.get(comp, 0):.3f}",
                        'Worst Config': f"‚Ç¨{worst_config.get(comp, 0):.3f}",
                        'Difference': f"‚Ç¨{worst_config.get(comp, 0) - best_config.get(comp, 0):.3f}"
                    })
                
                df_comparison = pd.DataFrame(comparison_data)
                st.dataframe(df_comparison, use_container_width=True)
                
    else:
        st.info("No calculation results available. Please run the calculation first.")

if __name__ == "__main__":
    main()
-----------------------------------------------------------------------------------------------------

GRANT CREATE STREAMLIT ON SCHEMA <M_CVS_LOGISTIC_PLANNING_ALD> TO ROLE <PROD_CVS_LOGISTIC_PLANNING_ALD_DATA_ANALYST>;
GRANT CREATE STAGE ON SCHEMA <M_CVS_LOGISTIC_PLANNING_ALD> TO ROLE <PROD_CVS_LOGISTIC_PLANNING_ALD_DATA_ANALYST>;
GRANT CREATE TABLE ON SCHEMA <M_CVS_LOGISTIC_PLANNING_ALD> TO ROLE <PROD_CVS_LOGISTIC_PLANNING_ALD_DATA_ANALYST>;